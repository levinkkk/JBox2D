/**
 * Created at 7:27:32 AM Jan 20, 2011
 */
package org.jbox2d.dynamics.joints;

import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.TimeStep;
import org.jbox2d.pooling.WorldPool;

/**
 * @author Daniel Murphy
 */
public class FrictionJoint extends Joint {
	
	Vec2 m_localAnchorA;
	Vec2 m_localAnchorB;

	Mat22 m_linearMass;
	float m_angularMass;

	Vec2 m_linearImpulse;
	float m_angularImpulse;

	float m_maxForce;
	float m_maxTorque;
	
	/**
	 * @param argWorldPool
	 * @param def
	 */
	protected FrictionJoint(WorldPool argWorldPool, FrictionJointDef def) {
		super(argWorldPool, def);
		m_localAnchorA = def.localAnchorA;
		m_localAnchorB = def.localAnchorB;

		m_linearImpulse.setZero();
		m_angularImpulse = 0.0f;

		m_maxForce = def.maxForce;
		m_maxTorque = def.maxTorque;
	}

	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getAnchorA(org.jbox2d.common.Vec2)
	 */
	@Override
	public void getAnchorA(new Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getAnchorB(org.jbox2d.common.Vec2)
	 */
	@Override
	public void getAnchorB(new Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getReactionForce(float, org.jbox2d.common.Vec2)
	 */
	@Override
	public void getReactionForce(float inv_dt, new Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getReactionTorque(float)
	 */
	@Override
	public float getReactionTorque(float inv_dt) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#initVelocityConstraints(org.jbox2d.dynamics.TimeStep)
	 */
	@Override
	public void initVelocityConstraints(TimeStep step) {
		Body bA = m_bodyA;
		Body bB = m_bodyB;

		// Compute the effective mass matrix.
		Vec2 rA = Mul(bA.getTransform().R, m_localAnchorA - bA.getLocalCenter());
		Vec2 rB = Mul(bB.getTransform().R, m_localAnchorB - bB.getLocalCenter());

		// J = [-I -r1_skew I r2_skew]
		//     [ 0       -1 0       1]
		// r_skew = [-ry; rx]

		// Matlab
		// K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
		//     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
		//     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

		float mA = bA.m_invMass, mB = bB.m_invMass;
		float iA = bA.m_invI, iB = bB.m_invI;

		Mat22 K1;
		K1.col1.x = mA + mB;	K1.col2.x = 0.0f;
		K1.col1.y = 0.0f;		K1.col2.y = mA + mB;

		Mat22 K2;
		K2.col1.x =  iA * rA.y * rA.y;	K2.col2.x = -iA * rA.x * rA.y;
		K2.col1.y = -iA * rA.x * rA.y;	K2.col2.y =  iA * rA.x * rA.x;

		Mat22 K3;
		K3.col1.x =  iB * rB.y * rB.y;	K3.col2.x = -iB * rB.x * rB.y;
		K3.col1.y = -iB * rB.x * rB.y;	K3.col2.y =  iB * rB.x * rB.x;

		Mat22 K = K1 + K2 + K3;
		m_linearMass = K.getInverse();

		m_angularMass = iA + iB;
		if (m_angularMass > 0.0f)
		{
			m_angularMass = 1.0f / m_angularMass;
		}

		if (step.warmStarting)
		{
			// Scale impulses to support a variable time step.
			m_linearImpulse *= step.dtRatio;
			m_angularImpulse *= step.dtRatio;

			Vec2 P(m_linearImpulse.x, m_linearImpulse.y);

			bA.m_linearVelocity -= mA * P;
			bA.m_angularVelocity -= iA * (Vec2.cross(rA, P) + m_angularImpulse);

			bB.m_linearVelocity += mB * P;
			bB.m_angularVelocity += iB * (Vec2.cross(rB, P) + m_angularImpulse);
		}
		else
		{
			m_linearImpulse.setZero();
			m_angularImpulse = 0.0f;
		}
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#solveVelocityConstraints(org.jbox2d.dynamics.TimeStep)
	 */
	@Override
	public void solveVelocityConstraints(TimeStep step) {
		Body bA = m_bodyA;
		Body bB = m_bodyB;

		Vec2 vA = bA.m_linearVelocity;
		float wA = bA.m_angularVelocity;
		Vec2 vB = bB.m_linearVelocity;
		float wB = bB.m_angularVelocity;

		float mA = bA.m_invMass, mB = bB.m_invMass;
		float iA = bA.m_invI, iB = bB.m_invI;

		Vec2 rA = Mul(bA.getTransform().R, m_localAnchorA - bA.getLocalCenter());
		Vec2 rB = Mul(bB.getTransform().R, m_localAnchorB - bB.getLocalCenter());

		// Solve angular friction
		{
			float Cdot = wB - wA;
			float impulse = -m_angularMass * Cdot;

			float oldImpulse = m_angularImpulse;
			float maxImpulse = step.dt * m_maxTorque;
			m_angularImpulse = Clamp(m_angularImpulse + impulse, -maxImpulse, maxImpulse);
			impulse = m_angularImpulse - oldImpulse;

			wA -= iA * impulse;
			wB += iB * impulse;
		}

		// Solve linear friction
		{
			Vec2 Cdot = vB + Vec2.cross(wB, rB) - vA - Vec2.cross(wA, rA);

			Vec2 impulse = -Mul(m_linearMass, Cdot);
			Vec2 oldImpulse = m_linearImpulse;
			m_linearImpulse += impulse;

			float maxImpulse = step.dt * m_maxForce;

			if (m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse)
			{
				m_linearImpulse.Normalize();
				m_linearImpulse *= maxImpulse;
			}

			impulse = m_linearImpulse - oldImpulse;

			vA -= mA * impulse;
			wA -= iA * Vec2.cross(rA, impulse);

			vB += mB * impulse;
			wB += iB * Vec2.cross(rB, impulse);
		}

		bA.m_linearVelocity = vA;
		bA.m_angularVelocity = wA;
		bB.m_linearVelocity = vB;
		bB.m_angularVelocity = wB;
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#solvePositionConstraints(float)
	 */
	@Override
	public boolean solvePositionConstraints(float baumgarte) {
		return true;
	}
}
