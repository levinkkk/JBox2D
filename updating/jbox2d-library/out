/**
 * Created at 12:12:02 PM Jan 23, 2011
 */
package org.jbox2d.dynamics.joints;

import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.TimeStep;
import org.jbox2d.pooling.WorldPool;

/**
 * @author Daniel Murphy
 */
public class PulleyJoint extends Joint {
	
	public static final float MIN_PULLEY_LENGTH = 2.0f;
	
	Vec2 m_groundAnchor1;
	Vec2 m_groundAnchor2;
	Vec2 m_localAnchor1;
	Vec2 m_localAnchor2;

	Vec2 m_u1;
	Vec2 m_u2;
	
	float m_constant;
	float m_ratio;
	
	float m_maxLength1;
	float m_maxLength2;

	// Effective masses
	float m_pulleyMass;
	float m_limitMass1;
	float m_limitMass2;

	// Impulses for accumulation/warm starting.
	float m_impulse;
	float m_limitImpulse1;
	float m_limitImpulse2;

	LimitState m_state;
	LimitState m_limitState1;
	LimitState m_limitState2;
	
	/**
	 * @param argWorldPool
	 * @param def
	 */
	public PulleyJoint(WorldPool argWorldPool, PulleyJointDef def) {
		super(argWorldPool, def);
		m_groundAnchor1 = def.groundAnchorA;
		m_groundAnchor2 = def.groundAnchorB;
		m_localAnchor1 = def.localAnchorA;
		m_localAnchor2 = def.localAnchorB;

		assert(def.ratio != 0.0f);
		m_ratio = def.ratio;

		m_constant = def.lengthA + m_ratio * def.lengthB;

		m_maxLength1 = Min(def.maxLengthA, m_constant - m_ratio * _minPulleyLength);
		m_maxLength2 = Min(def.maxLengthB, (m_constant - _minPulleyLength) / m_ratio);

		m_impulse = 0.0f;
		m_limitImpulse1 = 0.0f;
		m_limitImpulse2 = 0.0f;
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getAnchorA(org.jbox2d.common.Vec2)
	 */
	@Override
	public void getAnchorA(Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getAnchorB(org.jbox2d.common.Vec2)
	 */
	@Override
	public void getAnchorB(Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getReactionForce(float, org.jbox2d.common.Vec2)
	 */
	@Override
	public void getReactionForce(float inv_dt, Vec2 argOut) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#getReactionTorque(float)
	 */
	@Override
	public float getReactionTorque(float inv_dt) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#initVelocityConstraints(org.jbox2d.dynamics.TimeStep)
	 */
	@Override
	public void initVelocityConstraints(TimeStep step) {
		Body b1 = m_bodyA;
		Body  = m_bodyB;

		Vec2 r1 = Mul(b1.getTransform().R, m_localAnchor1 - b1.getLocalCenter());
		Vec2 r2 = Mul(.getTransform().R, m_localAnchor2 - .getLocalCenter());

		Vec2 p1 = b1.m_sweep.c + r1;
		Vec2 p2 = .m_sweep.c + r2;

		Vec2 s1 = m_groundAnchor1;
		Vec2 s2 = m_groundAnchor2;

		// Get the pulley axes.
		m_u1 = p1 - s1;
		m_u2 = p2 - s2;

		float length1 = m_u1.length();
		float length2 = m_u2.length();

		if (length1 > Settings.linearSlop)
		{
			m_u1 *= 1.0f / length1;
		}
		else
		{
			m_u1.setZero();
		}

		if (length2 > Settings.linearSlop)
		{
			m_u2 *= 1.0f / length2;
		}
		else
		{
			m_u2.setZero();
		}

		float C = m_constant - length1 - m_ratio * length2;
		if (C > 0.0f)
		{
			m_state = e_inactiveLimit;
			m_impulse = 0.0f;
		}
		else
		{
			m_state = e_atUpperLimit;
		}

		if (length1 < m_maxLength1)
		{
			m_limitState1 = e_inactiveLimit;
			m_limitImpulse1 = 0.0f;
		}
		else
		{
			m_limitState1 = e_atUpperLimit;
		}

		if (length2 < m_maxLength2)
		{
			m_limitState2 = e_inactiveLimit;
			m_limitImpulse2 = 0.0f;
		}
		else
		{
			m_limitState2 = e_atUpperLimit;
		}

		// Compute effective mass.
		float cr1u1 = Vec2.cross(r1, m_u1);
		float cr2u2 = Vec2.cross(r2, m_u2);

		m_limitMass1 = b1.m_invMass + b1.m_invI * cr1u1 * cr1u1;
		m_limitMass2 = .m_invMass + .m_invI * cr2u2 * cr2u2;
		m_pulleyMass = m_limitMass1 + m_ratio * m_ratio * m_limitMass2;
		assert(m_limitMass1 > _epsilon);
		assert(m_limitMass2 > _epsilon);
		assert(m_pulleyMass > _epsilon);
		m_limitMass1 = 1.0f / m_limitMass1;
		m_limitMass2 = 1.0f / m_limitMass2;
		m_pulleyMass = 1.0f / m_pulleyMass;

		if (step.warmStarting)
		{
			// Scale impulses to support variable time steps.
			m_impulse *= step.dtRatio;
			m_limitImpulse1 *= step.dtRatio;
			m_limitImpulse2 *= step.dtRatio;

			// Warm starting.
			Vec2 P1 = -(m_impulse + m_limitImpulse1) * m_u1;
			Vec2 P2 = (-m_ratio * m_impulse - m_limitImpulse2) * m_u2;
			b1.m_linearVelocity += b1.m_invMass * P1;
			b1.m_angularVelocity += b1.m_invI * Vec2.cross(r1, P1);
			.m_linearVelocity += .m_invMass * P2;
			.m_angularVelocity += .m_invI * Vec2.cross(r2, P2);
		}
		else
		{
			m_impulse = 0.0f;
			m_limitImpulse1 = 0.0f;
			m_limitImpulse2 = 0.0f;
		}
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#solveVelocityConstraints(org.jbox2d.dynamics.TimeStep)
	 */
	@Override
	public void solveVelocityConstraints(TimeStep step) {
		Body b1 = m_bodyA;
		Body  = m_bodyB;

		Vec2 r1 = Mul(b1.getTransform().R, m_localAnchor1 - b1.getLocalCenter());
		Vec2 r2 = Mul(.getTransform().R, m_localAnchor2 - .getLocalCenter());

		if (m_state == e_atUpperLimit)
		{
			Vec2 v1 = b1.m_linearVelocity + Vec2.cross(b1.m_angularVelocity, r1);
			Vec2 v2 = .m_linearVelocity + Vec2.cross(.m_angularVelocity, r2);

			float Cdot = -Vec2.dot(m_u1, v1) - m_ratio * Vec2.dot(m_u2, v2);
			float impulse = m_pulleyMass * (-Cdot);
			float oldImpulse = m_impulse;
			m_impulse = Max(0.0f, m_impulse + impulse);
			impulse = m_impulse - oldImpulse;

			Vec2 P1 = -impulse * m_u1;
			Vec2 P2 = -m_ratio * impulse * m_u2;
			b1.m_linearVelocity += b1.m_invMass * P1;
			b1.m_angularVelocity += b1.m_invI * Vec2.cross(r1, P1);
			.m_linearVelocity += .m_invMass * P2;
			.m_angularVelocity += .m_invI * Vec2.cross(r2, P2);
		}

		if (m_limitState1 == e_atUpperLimit)
		{
			Vec2 v1 = b1.m_linearVelocity + Vec2.cross(b1.m_angularVelocity, r1);

			float Cdot = -Vec2.dot(m_u1, v1);
			float impulse = -m_limitMass1 * Cdot;
			float oldImpulse = m_limitImpulse1;
			m_limitImpulse1 = Max(0.0f, m_limitImpulse1 + impulse);
			impulse = m_limitImpulse1 - oldImpulse;

			Vec2 P1 = -impulse * m_u1;
			b1.m_linearVelocity += b1.m_invMass * P1;
			b1.m_angularVelocity += b1.m_invI * Vec2.cross(r1, P1);
		}

		if (m_limitState2 == e_atUpperLimit)
		{
			Vec2 v2 = .m_linearVelocity + Vec2.cross(.m_angularVelocity, r2);

			float Cdot = -Vec2.dot(m_u2, v2);
			float impulse = -m_limitMass2 * Cdot;
			float oldImpulse = m_limitImpulse2;
			m_limitImpulse2 = Max(0.0f, m_limitImpulse2 + impulse);
			impulse = m_limitImpulse2 - oldImpulse;

			Vec2 P2 = -impulse * m_u2;
			.m_linearVelocity += .m_invMass * P2;
			.m_angularVelocity += .m_invI * Vec2.cross(r2, P2);
		}
	}
	
	/**
	 * @see org.jbox2d.dynamics.joints.Joint#solvePositionConstraints(float)
	 */
	@Override
	public boolean solvePositionConstraints(float baumgarte) {
		Body b1 = m_bodyA;
		Body  = m_bodyB;

		Vec2 s1 = m_groundAnchor1;
		Vec2 s2 = m_groundAnchor2;

		float linearError = 0.0f;

		if (m_state == e_atUpperLimit)
		{
			Vec2 r1 = Mul(b1.getTransform().R, m_localAnchor1 - b1.getLocalCenter());
			Vec2 r2 = Mul(.getTransform().R, m_localAnchor2 - .getLocalCenter());

			Vec2 p1 = b1.m_sweep.c + r1;
			Vec2 p2 = .m_sweep.c + r2;

			// Get the pulley axes.
			m_u1 = p1 - s1;
			m_u2 = p2 - s2;

			float length1 = m_u1.length();
			float length2 = m_u2.length();

			if (length1 > Settings.linearSlop)
			{
				m_u1 *= 1.0f / length1;
			}
			else
			{
				m_u1.setZero();
			}

			if (length2 > Settings.linearSlop)
			{
				m_u2 *= 1.0f / length2;
			}
			else
			{
				m_u2.setZero();
			}

			float C = m_constant - length1 - m_ratio * length2;
			linearError = Max(linearError, -C);

			C = Clamp(C + Settings.linearSlop, -_maxLinearCorrection, 0.0f);
			float impulse = -m_pulleyMass * C;

			Vec2 P1 = -impulse * m_u1;
			Vec2 P2 = -m_ratio * impulse * m_u2;

			b1.m_sweep.c += b1.m_invMass * P1;
			b1.m_sweep.a += b1.m_invI * Vec2.cross(r1, P1);
			.m_sweep.c += .m_invMass * P2;
			.m_sweep.a += .m_invI * Vec2.cross(r2, P2);

			b1.SynchronizeTransform();
			.SynchronizeTransform();
		}

		if (m_limitState1 == e_atUpperLimit)
		{
			Vec2 r1 = Mul(b1.getTransform().R, m_localAnchor1 - b1.getLocalCenter());
			Vec2 p1 = b1.m_sweep.c + r1;

			m_u1 = p1 - s1;
			float length1 = m_u1.length();

			if (length1 > Settings.linearSlop)
			{
				m_u1 *= 1.0f / length1;
			}
			else
			{
				m_u1.setZero();
			}

			float C = m_maxLength1 - length1;
			linearError = Max(linearError, -C);
			C = Clamp(C + Settings.linearSlop, -_maxLinearCorrection, 0.0f);
			float impulse = -m_limitMass1 * C;

			Vec2 P1 = -impulse * m_u1;
			b1.m_sweep.c += b1.m_invMass * P1;
			b1.m_sweep.a += b1.m_invI * Vec2.cross(r1, P1);

			b1.SynchronizeTransform();
		}

		if (m_limitState2 == e_atUpperLimit)
		{
			Vec2 r2 = Mul(.getTransform().R, m_localAnchor2 - .getLocalCenter());
			Vec2 p2 = .m_sweep.c + r2;

			m_u2 = p2 - s2;
			float length2 = m_u2.length();

			if (length2 > Settings.linearSlop)
			{
				m_u2 *= 1.0f / length2;
			}
			else
			{
				m_u2.setZero();
			}

			float C = m_maxLength2 - length2;
			linearError = Max(linearError, -C);
			C = Clamp(C + Settings.linearSlop, -_maxLinearCorrection, 0.0f);
			float impulse = -m_limitMass2 * C;

			Vec2 P2 = -impulse * m_u2;
			.m_sweep.c += .m_invMass * P2;
			.m_sweep.a += .m_invI * Vec2.cross(r2, P2);

			.SynchronizeTransform();
		}

		return linearError < Settings.linearSlop;
	}
	
}
